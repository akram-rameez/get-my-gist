{"version":3,"sources":["constants.js","utils/requestHandler.js","components/searchUser/index.jsx","components/gistList/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["API_HOST","millisecondsInAnHour","generateRequestTimestamp","args","time","Date","now","RequestHandler","this","requestsLog","url","a","options","data","length","firstRequest","rest","requestLog","console","warn","requestlog","push","method","fetchURL","URL","search","URLSearchParams","toString","fetch","includes","JSON","stringify","response","json","log","SearchUser","props","onSuccessfulSearch","React","useState","error","setError","onFormSubmit","useCallback","e","preventDefault","formData","FormData","target","username","get","q","searchResult","totalCount","total_count","items","login","onSubmit","type","required","name","defaultProps","getGists","from","callback","GistList","gists","setGists","appendGists","gistList","list","useEffect","App","user","setUser","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53e1f1fb.chunk.js","sourcesContent":["export const API_HOST = \"https://api.github.com\";\n\nexport const SOMETHING = null;\n","import { API_HOST } from \"../constants\";\n\nconst millisecondsInAnHour = 60 * 60 * 1000;\n\nfunction generateRequestTimestamp(args) {\n  return {\n    ...args,\n    time: Date.now(),\n  };\n}\n\nclass ProjectRequestHandler {\n  constructor() {\n    this.requestsLog = [];\n  }\n\n  async fetch(url, options = {}, data = {}) {\n    if (this.requestsLog.length) {\n      const [firstRequest, ...rest] = this.requestsLog;\n      const { time } = firstRequest;\n\n      if (Date.now() - time < millisecondsInAnHour) {\n        this.requestLog = rest;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Already completed ${this.requestlog.length} requests in throttle window`\n        );\n      }\n    }\n\n    this.requestsLog.push(generateRequestTimestamp({ url }));\n\n    const { method } = options;\n    const fetchURL = new URL(`${API_HOST}${url}`);\n    if (method === \"GET\") {\n      fetchURL.search = new URLSearchParams(data).toString();\n    }\n\n    const response = await fetch(fetchURL, {\n      ...options,\n      ...([\"POST\", \"UPDATE\"].includes(method)\n        ? { data: JSON.stringify(data) }\n        : {}),\n    });\n\n    try {\n      return response.json();\n    } catch (err) {\n      console.log(err);\n    }\n\n    return null;\n  }\n}\n\nconst RequestHandler = new ProjectRequestHandler();\n\nexport default RequestHandler;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport RequestHandler from \"../../utils/requestHandler\";\n\nconst SearchUser = (props) => {\n  const { onSuccessfulSearch } = props;\n  const [error, setError] = React.useState(\"\");\n\n  const onFormSubmit = React.useCallback(\n    async (e) => {\n      e.preventDefault();\n\n      const formData = new FormData(e.target);\n      const username = formData.get(\"username\");\n\n      const searchResult = await RequestHandler.fetch(\n        \"/search/users\",\n        { method: \"GET\" },\n        { q: username }\n      );\n\n      const { total_count: totalCount, items } = searchResult;\n      if (totalCount === 1) {\n        setError(\"\");\n\n        const [{ login }] = items;\n        onSuccessfulSearch(login);\n      } else if (totalCount > 0) {\n        setError(\"multiple users found\");\n      } else {\n        setError(\"no user found\");\n      }\n    },\n    [onSuccessfulSearch]\n  );\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <input type=\"string\" required name=\"username\" />\n      <button type=\"submit\">Search</button>\n      <div>{error}</div>\n    </form>\n  );\n};\n\nSearchUser.propTypes = {\n  onSuccessfulSearch: PropTypes.func,\n};\n\nSearchUser.defaultProps = {\n  onSuccessfulSearch: (...args) => console.log(args),\n};\n\nexport default SearchUser;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport RequestHandler from \"../../utils/requestHandler\";\n\nconst getGists = async (username, from, callback) => {\n  const response = await RequestHandler.fetch(`/users/${username}/gists`, {\n    method: \"GET\",\n  });\n\n  callback(response);\n};\n\nconst GistList = (props) => {\n  const { username } = props;\n  const [gists, setGists] = React.useState([]);\n\n  const appendGists = React.useCallback((gistList) => {\n    setGists((list) => [...list, ...gistList]);\n  }, []);\n\n  React.useEffect(() => {\n    getGists(username, 0, appendGists);\n  }, []);\n\n  return <div>found {gists.length} gists</div>;\n};\n\nGistList.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nexport default GistList;\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchUser from \"./components/searchUser\";\nimport GistList from \"./components/gistList\";\n\nfunction App() {\n  const [user, setUser] = React.useState(null);\n\n  return (\n    <div className=\"App\">\n      {!user && <SearchUser onSuccessfulSearch={setUser} />}\n      {user}\n      {!!user && <GistList username={user} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}