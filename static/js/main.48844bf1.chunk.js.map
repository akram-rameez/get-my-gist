{"version":3,"sources":["constants.js","utils/requestHandler.js","components/gistList/accordionList.jsx","components/gistList/index.jsx","components/searchUser/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["API_HOST","millisecondsInAnHour","generateRequestTimestamp","args","time","Date","now","RequestHandler","this","requestsLog","url","a","options","data","length","firstRequest","rest","requestLog","console","warn","requestlog","push","method","fetchURL","URL","search","URLSearchParams","toString","fetch","includes","JSON","stringify","response","json","log","getForksForGist","forkURL","callback","cleanURL","replace","per_page","useStyles","makeStyles","theme","root","width","marginTop","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","ForkContainer","props","onMount","React","useEffect","style","LinearProgress","map","d","html_url","owner","image","avatar_url","id","login","href","target","rel","Chip","avatar","Avatar","alt","src","label","variant","marginRight","defaultProps","AccordionList","gists","loading","gistForkMap","updateGistForksMap","classes","useState","expanded","setExpanded","className","gist","panel","forksURL","forks_url","files","description","fileNames","Object","keys","fileTypes","Set","x","language","filter","Boolean","Accordion","onChange","event","isExpanded","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","getGists","username","from","page","perPage","forks","GistList","setGists","setLoading","useReducer","state","action","fetchOptions","debounce","inputValue","q","items","SearchUser","onSelect","onClear","value","setValue","setInputValue","setOptions","Autocomplete","getOptionLabel","option","filterOptions","autoComplete","freeSolo","filterSelectedOptions","newValue","onInputChange","newInputValue","renderInput","params","TextField","fullWidth","renderOption","flexGrow","menuButton","spacing","title","App","user","setUser","useCallback","AppBar","position","Toolbar","Container","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48844bf1.chunk.js","sourcesContent":["export const API_HOST = \"https://api.github.com\";\n\nexport const SOMETHING = null;\n","import { API_HOST } from \"../constants\";\n\nconst millisecondsInAnHour = 60 * 60 * 1000;\n\nfunction generateRequestTimestamp(args) {\n  return {\n    ...args,\n    time: Date.now(),\n  };\n}\n\nclass ProjectRequestHandler {\n  constructor() {\n    this.requestsLog = [];\n  }\n\n  async fetch(url, options = {}, data = {}) {\n    if (this.requestsLog.length) {\n      const [firstRequest, ...rest] = this.requestsLog;\n      const { time } = firstRequest;\n\n      if (Date.now() - time < millisecondsInAnHour) {\n        this.requestLog = rest;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Already completed ${this.requestlog.length} requests in throttle window`\n        );\n      }\n    }\n\n    this.requestsLog.push(generateRequestTimestamp({ url }));\n\n    const { method } = options;\n    const fetchURL = new URL(`${API_HOST}${url}`);\n    if (method === \"GET\") {\n      fetchURL.search = new URLSearchParams(data).toString();\n    }\n\n    const response = await fetch(fetchURL, {\n      ...options,\n      ...([\"POST\", \"UPDATE\"].includes(method)\n        ? { data: JSON.stringify(data) }\n        : {}),\n    });\n\n    try {\n      return response.json();\n    } catch (err) {\n      console.log(err);\n    }\n\n    return null;\n  }\n}\n\nconst RequestHandler = new ProjectRequestHandler();\n\nexport default RequestHandler;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n  Chip,\n  LinearProgress,\n  Avatar,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport RequestHandler from \"../../utils/requestHandler\";\n\n// eslint-disable-next-line no-unused-vars\nconst getForksForGist = async (forkURL, callback) => {\n  const cleanURL = forkURL.replace(\"https://api.github.com\", \"\");\n  const response = await RequestHandler.fetch(\n    cleanURL,\n    { method: \"GET\" },\n    {\n      per_page: 3,\n      // sort: \"created-at-asc\",\n    }\n  );\n\n  return callback(response);\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    marginTop: 10,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"33.33%\",\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst ForkContainer = (props) => {\n  const { data, onMount } = props;\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  return (\n    <div style={{ marginTop: 10 }}>\n      {!data && <LinearProgress />}\n      {!!data && (\n        <div>\n          {data.map((d) => {\n            const {\n              html_url: url,\n              owner: { avatar_url: image, id, login } = {},\n            } = d;\n\n            return (\n              <a href={url} target=\"_blank\" rel=\"noreferrer\">\n                <Chip\n                  key={id}\n                  avatar={<Avatar alt={login} src={image} />}\n                  label={login}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  style={{ marginRight: 10 }}\n                />\n              </a>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nForkContainer.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      url: PropTypes.string,\n      id: PropTypes.string,\n      owner: PropTypes.shape({\n        login: PropTypes.string,\n      }),\n    })\n  ),\n  onMount: PropTypes.func,\n};\n\nForkContainer.defaultProps = {\n  data: null,\n  onMount: () => {},\n};\n\nconst AccordionList = (props) => {\n  // eslint-disable-next-line no-unused-vars\n  const { gists, loading, gistForkMap, updateGistForksMap } = props;\n\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  if (loading) return <LinearProgress />;\n\n  return (\n    <div className={classes.root}>\n      {(gists || []).map((gist) => {\n        const {\n          id,\n          html_url: url,\n          forks_url: forksURL,\n          files,\n          description,\n        } = gist;\n\n        const fileNames = Object.keys(files);\n        const fileTypes = [\n          ...new Set(fileNames.map((x) => files[x].language)),\n        ].filter(Boolean);\n\n        return (\n          <Accordion\n            key={id}\n            expanded={expanded === id}\n            onChange={handleChange(id)}\n            TransitionProps={{ unmountOnExit: true }}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1bh-content\"\n              id=\"panel1bh-header\"\n            >\n              <Typography className={classes.heading}>\n                {description}\n                {!description && (\n                  <span style={{ color: \"#eaeaea\", fontSize: 10 }}>\n                    No Description Available\n                  </span>\n                )}\n              </Typography>\n              <Typography className={classes.secondaryHeading}>\n                <a href={url} target=\"_blank\" rel=\"noreferrer\">\n                  {id}\n                </a>\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography>\n                <div className=\"filetypes-badges\">\n                  {(fileTypes || []).map((label) => (\n                    <Chip style={{ marginRight: 10 }} label={label} />\n                  ))}\n                </div>\n                <ForkContainer\n                  data={gistForkMap[id]}\n                  onMount={() => {\n                    if (!gistForkMap[id])\n                      getForksForGist(forksURL, (data) =>\n                        updateGistForksMap({ id, data })\n                      );\n                  }}\n                />\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n        );\n      })}\n    </div>\n  );\n};\n\nAccordionList.propTypes = {\n  gists: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      description: PropTypes.string,\n      url: PropTypes.string,\n      forks_url: PropTypes.string,\n      files: PropTypes.shape({\n        [PropTypes.string]: PropTypes.shape({\n          filename: PropTypes.string,\n          language: PropTypes.string,\n        }),\n      }),\n    })\n  ),\n  loading: PropTypes.bool,\n  gistForkMap: PropTypes.shape({\n    [PropTypes.string]: PropTypes.shape({\n      url: PropTypes.string,\n      id: PropTypes.string,\n      owner: PropTypes.shape({\n        login: PropTypes.string,\n      }),\n    }),\n  }),\n  updateGistForksMap: PropTypes.func,\n};\n\nAccordionList.defaultProps = {\n  loading: true,\n  gists: null,\n  gistForkMap: {},\n  updateGistForksMap: () => {},\n};\n\nexport default AccordionList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport RequestHandler from \"../../utils/requestHandler\";\n// import Grid from \"./datagridList\";\nimport AccordionList from \"./accordionList\";\n\n// const getForksForGist = (forkURL) => {\n//   const cleanURL = forkURL.replace(\"https://api.github.com\", \"\");\n//   return RequestHandler.fetch(cleanURL, { method: \"GET\" });\n// };\n\nconst getGists = async (username, from, callback) => {\n  let page = 1;\n  const perPage = 50;\n  let forks = [];\n\n  for (;;) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await RequestHandler.fetch(\n      `/users/${username}/gists`,\n      {\n        method: \"GET\",\n      },\n      { per_page: perPage, page }\n    );\n\n    // const forkList = Promise.all(\n    //   response.map((row) => {\n    //     const { forks_url: forkURL } = row;\n    //     return getForksForGist(forkURL);\n    //   })\n    // );\n\n    forks = [...forks, ...response];\n    // forks = [...forks, ...response.map((row) => ({ ...row, forkList }))];\n\n    if (response.length < 50) {\n      break;\n    } else {\n      page += 1;\n    }\n  }\n\n  callback(forks);\n};\n\nconst GistList = (props) => {\n  const { username } = props;\n  // eslint-disable-next-line no-unused-vars\n  const [gists, setGists] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n  const [gistForkMap, updateGistForksMap] = React.useReducer(\n    (state, action) => {\n      const { id, data } = action;\n      return { ...state, [id]: data };\n    },\n    {}\n  );\n\n  React.useEffect(() => {\n    getGists(username, 0, setGists);\n    setLoading(false);\n\n    return () => {\n      setGists(null);\n      setLoading(true);\n    };\n  }, [username]);\n\n  // return <Grid gists={gists} loading={loading} />;\n  return (\n    <AccordionList\n      gists={gists}\n      loading={loading}\n      gistForkMap={gistForkMap}\n      updateGistForksMap={updateGistForksMap}\n    />\n  );\n};\n\nGistList.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nexport default GistList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport debounce from \"lodash/debounce\";\nimport RequestHandler from \"../../utils/requestHandler\";\n\nconst fetchOptions = debounce(async (inputValue, callback) => {\n  if (inputValue === \"\") return callback([]);\n\n  const response = await RequestHandler.fetch(\n    \"/search/users\",\n    { method: \"GET\" },\n    { q: inputValue }\n  );\n\n  const { items } = response;\n  if (!items) return callback([]);\n\n  return callback(items);\n}, 300);\n\nconst SearchUser = (props) => {\n  const { onSelect, onClear } = props;\n\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n\n  React.useEffect(() => {\n    if (!inputValue) onClear(null);\n\n    fetchOptions(inputValue, setOptions);\n  }, [inputValue]);\n\n  return (\n    <Autocomplete\n      className=\"autocomplete\"\n      getOptionLabel={(option) => option.login}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      freeSolo\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n\n        if (!newValue) return;\n        const { login } = newValue;\n        onSelect(login);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Enter Username\"\n          variant=\"outlined\"\n          fullWidth\n        />\n      )}\n      renderOption={(option) => <div>{option.login}</div>}\n    />\n  );\n};\n\nSearchUser.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n  onClear: PropTypes.func,\n};\n\nSearchUser.defaultProps = {\n  onClear: () => {},\n};\n\nexport default SearchUser;\n","import React from \"react\";\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Typography, Toolbar, Container } from \"@material-ui/core\";\nimport GistList from \"./components/gistList\";\nimport SearchUser from \"./components/searchUser\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const [user, setUser] = React.useState(null);\n  const classes = useStyles();\n\n  const onClear = React.useCallback(() => {\n    setUser(null);\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Git my Gist\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container className=\"app-root\" height=\"100%\">\n        {<SearchUser onSelect={setUser} onClear={onClear} />}\n        {!!user && <GistList key={user} username={user} />}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}