{"version":3,"sources":["constants.js","utils/requestHandler.js","components/searchUser/index.jsx","components/gistList/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["API_HOST","millisecondsInAnHour","generateRequestTimestamp","args","time","Date","now","RequestHandler","this","requestsLog","url","a","options","data","length","firstRequest","rest","requestLog","console","warn","requestlog","push","method","fetchURL","URL","search","URLSearchParams","toString","fetch","includes","JSON","stringify","response","json","log","fetchOptions","debounce","inputValue","callback","q","items","SearchUser","props","onSelect","React","useState","value","setValue","setInputValue","setOptions","useEffect","Autocomplete","id","style","width","getOptionLabel","option","login","filterOptions","x","autoComplete","freeSolo","filterSelectedOptions","onChange","event","newValue","onInputChange","newInputValue","renderInput","params","TextField","label","variant","fullWidth","renderOption","getGists","username","from","GistList","gists","setGists","appendGists","useCallback","gistList","list","App","user","setUser","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0730ad16.chunk.js","sourcesContent":["export const API_HOST = \"https://api.github.com\";\n\nexport const SOMETHING = null;\n","import { API_HOST } from \"../constants\";\n\nconst millisecondsInAnHour = 60 * 60 * 1000;\n\nfunction generateRequestTimestamp(args) {\n  return {\n    ...args,\n    time: Date.now(),\n  };\n}\n\nclass ProjectRequestHandler {\n  constructor() {\n    this.requestsLog = [];\n  }\n\n  async fetch(url, options = {}, data = {}) {\n    if (this.requestsLog.length) {\n      const [firstRequest, ...rest] = this.requestsLog;\n      const { time } = firstRequest;\n\n      if (Date.now() - time < millisecondsInAnHour) {\n        this.requestLog = rest;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Already completed ${this.requestlog.length} requests in throttle window`\n        );\n      }\n    }\n\n    this.requestsLog.push(generateRequestTimestamp({ url }));\n\n    const { method } = options;\n    const fetchURL = new URL(`${API_HOST}${url}`);\n    if (method === \"GET\") {\n      fetchURL.search = new URLSearchParams(data).toString();\n    }\n\n    const response = await fetch(fetchURL, {\n      ...options,\n      ...([\"POST\", \"UPDATE\"].includes(method)\n        ? { data: JSON.stringify(data) }\n        : {}),\n    });\n\n    try {\n      return response.json();\n    } catch (err) {\n      console.log(err);\n    }\n\n    return null;\n  }\n}\n\nconst RequestHandler = new ProjectRequestHandler();\n\nexport default RequestHandler;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport debounce from \"lodash/debounce\";\nimport RequestHandler from \"../../utils/requestHandler\";\n\nconst fetchOptions = debounce(async (inputValue, callback) => {\n  if (inputValue === \"\") return callback([]);\n\n  const response = await RequestHandler.fetch(\n    \"/search/users\",\n    { method: \"GET\" },\n    { q: inputValue }\n  );\n\n  const { items } = response;\n  if (!items) return callback([]);\n\n  return callback(items);\n}, 300);\n\nconst SearchUser = (props) => {\n  const { onSelect } = props;\n\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n\n  React.useEffect(() => {\n    fetchOptions(inputValue, setOptions);\n  }, [inputValue]);\n\n  return (\n    <Autocomplete\n      id=\"google-map-demo\"\n      style={{ width: 300 }}\n      getOptionLabel={(option) => option.login}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      freeSolo\n      // includeInputInList\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n\n        const { login } = newValue;\n        onSelect(login);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Enter Username\"\n          variant=\"outlined\"\n          fullWidth\n        />\n      )}\n      renderOption={(option) => <div>{option.login}</div>}\n    />\n  );\n};\n\nSearchUser.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n};\n\nexport default SearchUser;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport debounce from \"lodash/debounce\";\nimport RequestHandler from \"../../utils/requestHandler\";\n\nconst getGists = debounce(async (username, from, callback) => {\n  const response = await RequestHandler.fetch(`/users/${username}/gists`, {\n    method: \"GET\",\n  });\n\n  callback(response);\n}, 500);\n\nconst GistList = (props) => {\n  const { username } = props;\n  const [gists, setGists] = React.useState([]);\n\n  const appendGists = React.useCallback((gistList) => {\n    setGists((list) => [...list, ...gistList]);\n  }, []);\n\n  React.useEffect(() => {\n    getGists(username, 0, appendGists);\n  }, []);\n\n  return <div>found {gists.length} gists</div>;\n};\n\nGistList.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nexport default GistList;\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchUser from \"./components/searchUser\";\nimport GistList from \"./components/gistList\";\n\nfunction App() {\n  const [user, setUser] = React.useState(null);\n\n  return (\n    <div className=\"App\">\n      {!user && <SearchUser onSelect={setUser} />}\n      {user}\n      {!!user && <GistList username={user} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}