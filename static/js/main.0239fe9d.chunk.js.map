{"version":3,"sources":["context/requestHandler.js","components/gistList/accordionList.jsx","components/gistList/index.jsx","components/searchUser/index.jsx","constants.js","utils/requestHandler.js","App.jsx","reportWebVitals.js","index.js"],"names":["RequestHandlerContext","React","createContext","RequestHandlerProvider","Provider","getForksForGist","forkURL","fetcher","callback","a","cleanURL","replace","fetch","method","per_page","response","useStyles","makeStyles","theme","root","width","marginTop","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","overflow","textOverflow","color","palette","text","secondary","ForkContainer","props","data","onMount","useEffect","style","LinearProgress","map","d","url","html_url","owner","image","avatar_url","id","nodeId","node_id","login","updatedAt","updated_at","href","target","rel","Chip","avatar","Avatar","alt","src","label","variant","marginRight","defaultProps","AccordionList","gists","loading","gistForkMap","updateGistForksMap","classes","useState","expanded","setExpanded","requestHandler","useContext","className","gist","panel","forksURL","forks_url","files","description","fileNames","Object","keys","fileTypes","Set","x","language","filter","Boolean","Accordion","onChange","event","isExpanded","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","getGists","username","page","perPage","forks","length","GistList","setGists","setLoading","useReducer","state","action","fetchOptions","debounce","inputValue","q","items","SearchUser","onSelect","onClear","value","setValue","setInputValue","options","setOptions","Autocomplete","getOptionLabel","option","filterOptions","autoComplete","freeSolo","filterSelectedOptions","newValue","onInputChange","newInputValue","renderInput","params","TextField","fullWidth","renderOption","API_HOST","ProjectRequestHandler","onError","this","error","json","body","message","indexOf","Error","fetchURL","URL","search","URLSearchParams","toString","includes","JSON","stringify","status","_requestErrorHandler","getRequestHandler","flexGrow","menuButton","spacing","title","App","user","setUser","setError","useMemo","e","useCallback","clearErrorMessage","Snackbar","open","autoHideDuration","onClose","Alert","severity","AppBar","position","Toolbar","Container","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0239fe9d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst RequestHandlerContext = React.createContext(() => {});\n\nexport const RequestHandlerProvider = RequestHandlerContext.Provider;\n\nexport default RequestHandlerContext;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n  Chip,\n  LinearProgress,\n  Avatar,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport RequestHandlerContext from \"../../context/requestHandler\";\n\n// eslint-disable-next-line no-unused-vars\nconst getForksForGist = async (forkURL, fetcher, callback) => {\n  const cleanURL = forkURL.replace(\"https://api.github.com\", \"\");\n  const response = await fetcher.fetch(\n    cleanURL,\n    { method: \"GET\" },\n    {\n      per_page: 3,\n      // sort: \"created-at-asc\",\n    }\n  );\n\n  return callback(response);\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    marginTop: 10,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: \"70%\",\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    flexBasis: \"30%\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst ForkContainer = (props) => {\n  const { data, onMount } = props;\n\n  React.useEffect(() => {\n    onMount();\n  }, []);\n\n  return (\n    <div style={{ marginTop: 10 }}>\n      {!data && <LinearProgress />}\n      {!!data && (\n        <div>\n          {data.map((d) => {\n            const {\n              html_url: url,\n              owner: { avatar_url: image, id, node_id: nodeId, login } = {},\n              updated_at: updatedAt,\n            } = d;\n\n            return (\n              <a\n                href={url}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                key={`${id}-${nodeId}__${updatedAt}`}\n              >\n                <Chip\n                  avatar={<Avatar alt={login} src={image} />}\n                  label={login}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  style={{ marginRight: 10 }}\n                />\n              </a>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nForkContainer.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      url: PropTypes.string,\n      id: PropTypes.string,\n      owner: PropTypes.shape({\n        login: PropTypes.string,\n      }),\n    })\n  ),\n  onMount: PropTypes.func,\n};\n\nForkContainer.defaultProps = {\n  data: null,\n  onMount: () => {},\n};\n\nconst AccordionList = (props) => {\n  // eslint-disable-next-line no-unused-vars\n  const { gists, loading, gistForkMap, updateGistForksMap } = props;\n\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = (panel) => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  const requestHandler = React.useContext(RequestHandlerContext);\n\n  if (loading) return <LinearProgress />;\n\n  return (\n    <div className={classes.root}>\n      {(gists || []).map((gist) => {\n        const {\n          id,\n          html_url: url,\n          forks_url: forksURL,\n          files,\n          description,\n        } = gist;\n\n        const fileNames = Object.keys(files);\n        const fileTypes = [\n          ...new Set(fileNames.map((x) => files[x].language)),\n        ].filter(Boolean);\n\n        return (\n          <Accordion\n            key={id}\n            expanded={expanded === id}\n            onChange={handleChange(id)}\n            TransitionProps={{ unmountOnExit: true }}\n          >\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1bh-content\"\n              id=\"panel1bh-header\"\n            >\n              <Typography className={classes.heading} key=\"heading\">\n                {description}\n                {!description && (\n                  <span style={{ color: \"#eaeaea\", fontSize: 10 }}>\n                    No Description Available\n                  </span>\n                )}\n              </Typography>\n              <Typography className={classes.secondaryHeading} key=\"id\">\n                <a href={url} target=\"_blank\" rel=\"noreferrer\">\n                  {id}\n                </a>\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography key=\"file-types\">\n                <div className=\"filetypes-badges\">\n                  {(fileTypes || []).map((label) => (\n                    <Chip style={{ marginRight: 10 }} label={label} />\n                  ))}\n                </div>\n                <ForkContainer\n                  data={gistForkMap[id]}\n                  onMount={() => {\n                    if (!gistForkMap[id])\n                      getForksForGist(forksURL, requestHandler, (data) =>\n                        updateGistForksMap({ id, data })\n                      );\n                  }}\n                />\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n        );\n      })}\n    </div>\n  );\n};\n\nAccordionList.propTypes = {\n  gists: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      description: PropTypes.string,\n      url: PropTypes.string,\n      forks_url: PropTypes.string,\n      files: PropTypes.shape({\n        [PropTypes.string]: PropTypes.shape({\n          filename: PropTypes.string,\n          language: PropTypes.string,\n        }),\n      }),\n    })\n  ),\n  loading: PropTypes.bool,\n  gistForkMap: PropTypes.shape({\n    [PropTypes.string]: PropTypes.shape({\n      url: PropTypes.string,\n      id: PropTypes.string,\n      owner: PropTypes.shape({\n        login: PropTypes.string,\n      }),\n    }),\n  }),\n  updateGistForksMap: PropTypes.func,\n};\n\nAccordionList.defaultProps = {\n  loading: true,\n  gists: null,\n  gistForkMap: {},\n  updateGistForksMap: () => {},\n};\n\nexport default AccordionList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import Grid from \"./datagridList\";\nimport AccordionList from \"./accordionList\";\nimport RequestHandlerContext from \"../../context/requestHandler\";\n\n// const getForksForGist = (forkURL) => {\n//   const cleanURL = forkURL.replace(\"https://api.github.com\", \"\");\n//   return RequestHandler.fetch(cleanURL, { method: \"GET\" });\n// };\n\nconst getGists = async (username, fetcher, callback) => {\n  let page = 1;\n  const perPage = 50;\n  let forks = [];\n\n  for (;;) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await fetcher.fetch(\n      `/users/${username}/gists`,\n      {\n        method: \"GET\",\n      },\n      { per_page: perPage, page }\n    );\n\n    // const forkList = Promise.all(\n    //   response.map((row) => {\n    //     const { forks_url: forkURL } = row;\n    //     return getForksForGist(forkURL);\n    //   })\n    // );\n\n    if (!response) {\n      return callback(forks);\n    }\n\n    forks = [...forks, ...response];\n    // forks = [...forks, ...response.map((row) => ({ ...row, forkList }))];\n\n    if (response.length < 50) {\n      break;\n    } else {\n      page += 1;\n    }\n  }\n\n  return callback(forks);\n};\n\nconst GistList = (props) => {\n  const { username } = props;\n  // eslint-disable-next-line no-unused-vars\n  const [gists, setGists] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n  const [gistForkMap, updateGistForksMap] = React.useReducer(\n    (state, action) => {\n      const { id, data } = action;\n      return { ...state, [id]: data };\n    },\n    {}\n  );\n\n  const requestHandler = React.useContext(RequestHandlerContext);\n\n  React.useEffect(() => {\n    getGists(username, requestHandler, setGists);\n    setLoading(false);\n\n    return () => {\n      setGists(null);\n      setLoading(true);\n    };\n  }, [username]);\n\n  // return <Grid gists={gists} loading={loading} />;\n  return (\n    <AccordionList\n      gists={gists}\n      loading={loading}\n      gistForkMap={gistForkMap}\n      updateGistForksMap={updateGistForksMap}\n    />\n  );\n};\n\nGistList.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nexport default GistList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport debounce from \"lodash/debounce\";\nimport RequestHandlerContext from \"../../context/requestHandler\";\n\nconst fetchOptions = debounce(async (inputValue, callback, requestHandler) => {\n  if (inputValue === \"\") return callback([]);\n\n  const response = await requestHandler.fetch(\n    \"/search/users\",\n    { method: \"GET\" },\n    { q: inputValue }\n  );\n\n  const { items } = response || {};\n  if (!items) return callback([]);\n\n  return callback(items);\n}, 300);\n\nconst SearchUser = (props) => {\n  const { onSelect, onClear } = props;\n\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n\n  const requestHandler = React.useContext(RequestHandlerContext);\n\n  React.useEffect(() => {\n    if (!inputValue) onClear(null);\n\n    fetchOptions(inputValue, setOptions, requestHandler);\n  }, [inputValue]);\n\n  return (\n    <Autocomplete\n      className=\"autocomplete\"\n      getOptionLabel={(option) => {\n        if (!option.login) return option;\n        return option.login;\n      }}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      freeSolo\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n\n        if (!newValue) return;\n        const { login } = newValue;\n        onSelect(login);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Enter Username\"\n          variant=\"outlined\"\n          fullWidth\n        />\n      )}\n      renderOption={(option) => <div>{option.login}</div>}\n    />\n  );\n};\n\nSearchUser.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n  onClear: PropTypes.func,\n};\n\nSearchUser.defaultProps = {\n  onClear: () => {},\n};\n\nexport default SearchUser;\n","export const API_HOST = \"https://api.github.com\";\n\nexport const SOMETHING = null;\n","import { API_HOST } from \"../constants\";\n\nclass ProjectRequestHandler {\n  constructor(onError) {\n    this.onError = onError;\n  }\n\n  async _requestErrorHandler(error, response) {\n    if (error) {\n      return this.onError(error);\n    }\n\n    try {\n      const body = await response.json();\n\n      if (body.message) {\n        const { message } = body;\n        if (message.indexOf(\"API rate limit exceeded\") > -1) {\n          return this.onError(new Error(\"RateLimitExceeded\"));\n        }\n      }\n    } catch (err) {\n      return this.onError(new Error(\"UnknownError\"));\n    }\n\n    return this.onError(null);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async fetch(url, options = {}, data = {}) {\n    const { method } = options;\n    const fetchURL = new URL(`${API_HOST}${url}`);\n    if (method === \"GET\") {\n      fetchURL.search = new URLSearchParams(data).toString();\n    }\n\n    const response = await fetch(fetchURL, {\n      ...options,\n      ...([\"POST\", \"UPDATE\"].includes(method)\n        ? { data: JSON.stringify(data) }\n        : {}),\n    });\n\n    const { status } = response;\n    if (status >= 400) {\n      return this._requestErrorHandler(null, response);\n    }\n\n    try {\n      return response.json();\n    } catch (err) {\n      return this.onError(new Error(\"UnknownError\"));\n    }\n  }\n}\n\nfunction getRequestHandler(onError) {\n  return new ProjectRequestHandler(onError);\n}\n\nexport default getRequestHandler;\n","import React from \"react\";\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  AppBar,\n  Typography,\n  Toolbar,\n  Container,\n  Snackbar,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport GistList from \"./components/gistList\";\nimport SearchUser from \"./components/searchUser\";\nimport getRequestHandler from \"./utils/requestHandler\";\nimport { RequestHandlerProvider } from \"./context/requestHandler\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const [user, setUser] = React.useState(null);\n  const classes = useStyles();\n\n  const [error, setError] = React.useState(null);\n\n  const requestHandler = React.useMemo(\n    () =>\n      getRequestHandler((e) => {\n        switch (e.message) {\n          case \"RateLimitExceeded\":\n            setError(\n              \"You have reached API rate limits for the project. Please reload the page and try again after sometime\"\n            );\n            break;\n          default:\n            setError(\"Unknown Error experienced\");\n        }\n      }),\n    []\n  );\n\n  const onClear = React.useCallback(() => {\n    setUser(null);\n  }, []);\n\n  const clearErrorMessage = React.useCallback(() => {\n    setError(null);\n  }, []);\n\n  return (\n    <RequestHandlerProvider value={requestHandler}>\n      <Snackbar\n        open={!!error}\n        autoHideDuration={3000}\n        onClose={clearErrorMessage}\n      >\n        <Alert onClose={clearErrorMessage} severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Git my Gist\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Container className=\"app-root\" height=\"100%\">\n          {<SearchUser onSelect={setUser} onClear={onClear} />}\n          {!!user && <GistList key={user} username={user} />}\n        </Container>\n      </div>\n    </RequestHandlerProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}