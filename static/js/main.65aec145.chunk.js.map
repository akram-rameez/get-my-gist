{"version":3,"sources":["constants.js","utils/requestHandler.js","components/gistList/index.jsx","components/searchUser/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["API_HOST","millisecondsInAnHour","generateRequestTimestamp","args","time","Date","now","RequestHandler","this","requestsLog","url","a","options","data","length","firstRequest","rest","requestLog","console","warn","requestlog","push","method","fetchURL","URL","search","URLSearchParams","toString","fetch","includes","JSON","stringify","response","json","log","CustomLoadingOverlay","style","position","top","width","LinearProgress","getForksForGist","forkURL","cleanURL","replace","getGists","username","from","callback","page","forks","per_page","forkList","Promise","all","map","row","forks_url","columns","field","headerName","editable","flex","minWidth","valueGetter","params","files","Object","keys","x","language","filter","Boolean","renderCell","value","label","Chip","marginRight","GistList","props","React","useState","gists","setGists","useEffect","height","className","components","LoadingOverlay","loading","rows","pageSize","rowsPerPageOptions","disableSelectionOnClick","fetchOptions","debounce","inputValue","q","items","SearchUser","onSelect","onClear","setValue","setInputValue","setOptions","Autocomplete","getOptionLabel","option","login","filterOptions","autoComplete","freeSolo","filterSelectedOptions","onChange","event","newValue","onInputChange","newInputValue","renderInput","TextField","variant","fullWidth","renderOption","defaultProps","useStyles","makeStyles","theme","root","flexGrow","menuButton","spacing","title","App","user","setUser","classes","useCallback","AppBar","Toolbar","Typography","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65aec145.chunk.js","sourcesContent":["export const API_HOST = \"https://api.github.com\";\n\nexport const SOMETHING = null;\n","import { API_HOST } from \"../constants\";\n\nconst millisecondsInAnHour = 60 * 60 * 1000;\n\nfunction generateRequestTimestamp(args) {\n  return {\n    ...args,\n    time: Date.now(),\n  };\n}\n\nclass ProjectRequestHandler {\n  constructor() {\n    this.requestsLog = [];\n  }\n\n  async fetch(url, options = {}, data = {}) {\n    if (this.requestsLog.length) {\n      const [firstRequest, ...rest] = this.requestsLog;\n      const { time } = firstRequest;\n\n      if (Date.now() - time < millisecondsInAnHour) {\n        this.requestLog = rest;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Already completed ${this.requestlog.length} requests in throttle window`\n        );\n      }\n    }\n\n    this.requestsLog.push(generateRequestTimestamp({ url }));\n\n    const { method } = options;\n    const fetchURL = new URL(`${API_HOST}${url}`);\n    if (method === \"GET\") {\n      fetchURL.search = new URLSearchParams(data).toString();\n    }\n\n    const response = await fetch(fetchURL, {\n      ...options,\n      ...([\"POST\", \"UPDATE\"].includes(method)\n        ? { data: JSON.stringify(data) }\n        : {}),\n    });\n\n    try {\n      return response.json();\n    } catch (err) {\n      console.log(err);\n    }\n\n    return null;\n  }\n}\n\nconst RequestHandler = new ProjectRequestHandler();\n\nexport default RequestHandler;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GridOverlay, DataGrid } from \"@material-ui/data-grid\";\nimport { Chip, LinearProgress } from \"@material-ui/core\";\nimport RequestHandler from \"../../utils/requestHandler\";\n\nfunction CustomLoadingOverlay() {\n  return (\n    <GridOverlay>\n      <div style={{ position: \"absolute\", top: 0, width: \"100%\" }}>\n        <LinearProgress />\n      </div>\n    </GridOverlay>\n  );\n}\n\nconst getForksForGist = (forkURL) => {\n  const cleanURL = forkURL.replace(\"https://api.github.com\", \"\");\n  return RequestHandler.fetch(cleanURL, { method: \"GET\" });\n};\n\nconst getGists = async (username, from, callback) => {\n  let page = 1;\n  const perPage = 50;\n  let forks = [];\n\n  for (;;) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await RequestHandler.fetch(\n      `/users/${username}/gists`,\n      {\n        method: \"GET\",\n      },\n      { per_page: perPage, page }\n    );\n\n    const forkList = Promise.all(\n      response.map((row) => {\n        const { forks_url: forkURL } = row;\n        return getForksForGist(forkURL);\n      })\n    );\n\n    forks = [...forks, ...response.map((row) => ({ ...row, forkList }))];\n\n    if (response.length < 50) {\n      break;\n    } else {\n      page += 1;\n    }\n  }\n\n  callback(forks);\n};\n\nconst columns = [\n  { field: \"id\", headerName: \"ID\", width: 150 },\n  {\n    field: \"description\",\n    headerName: \"Description\",\n    editable: false,\n    flex: 1,\n    minWidth: 200,\n  },\n  {\n    field: \"fileTypes\",\n    headerName: \"File Types\",\n    valueGetter: (params) => {\n      const { row: { files = {} } = {} } = params;\n\n      const fileNames = Object.keys(files);\n      return fileNames.map((x) => files[x].language).filter(Boolean);\n    },\n    renderCell: (params) => {\n      const { value } = params;\n\n      return value.map((label) => (\n        <Chip style={{ marginRight: 10 }} label={label} />\n      ));\n    },\n    flex: 1,\n    minWidth: 200,\n  },\n];\n\nconst GistList = (props) => {\n  const { username } = props;\n  // eslint-disable-next-line no-unused-vars\n  const [gists, setGists] = React.useState([]);\n\n  React.useEffect(() => {\n    getGists(username, 0, setGists);\n    return () => {\n      setGists(null);\n    };\n  }, [username]);\n\n  return (\n    <div style={{ height: 500 }}>\n      <DataGrid\n        className=\"data-grid\"\n        components={{\n          LoadingOverlay: CustomLoadingOverlay,\n        }}\n        loading={!gists}\n        rows={gists}\n        columns={columns}\n        pageSize={5}\n        rowsPerPageOptions={[5]}\n        disableSelectionOnClick\n      />\n    </div>\n  );\n};\n\nGistList.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nexport default GistList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport debounce from \"lodash/debounce\";\nimport RequestHandler from \"../../utils/requestHandler\";\n\nconst fetchOptions = debounce(async (inputValue, callback) => {\n  if (inputValue === \"\") return callback([]);\n\n  const response = await RequestHandler.fetch(\n    \"/search/users\",\n    { method: \"GET\" },\n    { q: inputValue }\n  );\n\n  const { items } = response;\n  if (!items) return callback([]);\n\n  return callback(items);\n}, 300);\n\nconst SearchUser = (props) => {\n  const { onSelect, onClear } = props;\n\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n\n  React.useEffect(() => {\n    if (!inputValue) onClear(null);\n\n    fetchOptions(inputValue, setOptions);\n  }, [inputValue]);\n\n  return (\n    <Autocomplete\n      className=\"autocomplete\"\n      getOptionLabel={(option) => option.login}\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      freeSolo\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n\n        if (!newValue) return;\n        const { login } = newValue;\n        onSelect(login);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Enter Username\"\n          variant=\"outlined\"\n          fullWidth\n        />\n      )}\n      renderOption={(option) => <div>{option.login}</div>}\n    />\n  );\n};\n\nSearchUser.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n  onClear: PropTypes.func,\n};\n\nSearchUser.defaultProps = {\n  onClear: () => {},\n};\n\nexport default SearchUser;\n","import React from \"react\";\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Typography, Toolbar, Container } from \"@material-ui/core\";\nimport GistList from \"./components/gistList\";\nimport SearchUser from \"./components/searchUser\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const [user, setUser] = React.useState(null);\n  const classes = useStyles();\n\n  const onClear = React.useCallback(() => {\n    setUser(null);\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Git my Gist\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container className=\"app-root\" height=\"100%\">\n        {<SearchUser onSelect={setUser} onClear={onClear} />}\n        {!!user && <GistList key={user} username={user} />}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}